--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Client generated by Zap v0.6.16 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		send_events = noop,
		roll_item = table.freeze({
			fire = noop
		}),
		request_trade = table.freeze({
			fire = noop
		}),
		reject_trade = table.freeze({
			fire = noop
		}),
		set_item = table.freeze({
			fire = noop
		}),
		trade_ready = table.freeze({
			fire = noop
		}),
		start_trade = table.freeze({
			set_callback = noop
		}),
		obtain_item = table.freeze({
			set_callback = noop
		}),
		trade_rejected = table.freeze({
			set_callback = noop
		}),
		update_inventory = table.freeze({
			set_callback = noop
		}),
		set_item_offer = table.freeze({
			set_callback = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("ZAP")
local reliable = remotes:WaitForChild("ZAP_RELIABLE")
local unreliable = remotes:WaitForChild("ZAP_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE to be an UnreliableRemoteEvent")


local function send_events()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(send_events)

local events = table.create(10)
local event_queue: { [number]: { any } } = table.create(10)
event_queue[6] = {}
event_queue[7] = {}
event_queue[8] = 0
event_queue[9] = {}
event_queue[10] = {}
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 6 then
			local value
			value = {}
			incoming_ipos = incoming_ipos + 1
			value.who = incoming_inst[incoming_ipos]
			assert(value.who ~= nil)
			if events[6] then
				events[6](value)
			else
				table.insert(event_queue[6], value)
				if #event_queue[6] > 64 then
					warn(`[ZAP] {#event_queue[6]} events in queue for start_trade. Did you forget to attach a listener?`)
				end
			end
		elseif id == 7 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.obtained = buffer.readstring(incoming_buff, read(len_1), len_1)
			if events[7] then
				events[7](value)
			else
				table.insert(event_queue[7], value)
				if #event_queue[7] > 64 then
					warn(`[ZAP] {#event_queue[7]} events in queue for obtain_item. Did you forget to attach a listener?`)
				end
			end
		elseif id == 8 then
			local value
			if events[8] then
				events[8](value)
			else
				event_queue[8] += 1
				if event_queue[8] > 16 then
					warn(`[ZAP] {event_queue[8]} events in queue for trade_rejected. Did you forget to attach a listener?`)
				end
			end
		elseif id == 9 then
			local value
			value = {}
			for _ = 1, buffer.readu16(incoming_buff, read(2)) do
				local key_1
				local val_1
				local len_1 = buffer.readu16(incoming_buff, read(2))
				key_1 = buffer.readstring(incoming_buff, read(len_1), len_1)
				val_1 = buffer.readu8(incoming_buff, read(1))
				value[key_1] = val_1
			end
			if events[9] then
				events[9](value)
			else
				table.insert(event_queue[9], value)
				if #event_queue[9] > 64 then
					warn(`[ZAP] {#event_queue[9]} events in queue for update_inventory. Did you forget to attach a listener?`)
				end
			end
		elseif id == 10 then
			local value
			value = {}
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.item = buffer.readstring(incoming_buff, read(len_1), len_1)
			value.amount = buffer.readu32(incoming_buff, read(4))
			if events[10] then
				events[10](value)
			else
				table.insert(event_queue[10], value)
				if #event_queue[10] > 64 then
					warn(`[ZAP] {#event_queue[10]} events in queue for set_item_offer. Did you forget to attach a listener?`)
				end
			end
		else
			error("Unknown event id")
		end
	end
end)
local returns = {
	send_events = send_events,
	roll_item = {
		fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
		end,
	},
	request_trade = {
		fire = function(value: (Instance))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			table.insert(outgoing_inst, value)
		end,
	},
	reject_trade = {
		fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
		end,
	},
	set_item = {
		fire = function(value: ({
			item: (string),
			amount: (number),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			local len_1 = #value.item
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			alloc(len_1)
			buffer.writestring(outgoing_buff, outgoing_apos, value.item, len_1)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, value.amount)
		end,
	},
	trade_ready = {
		fire = function()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 5)
		end,
	},
	start_trade = {
		set_callback = function(callback: (value: ({
			who: (Instance),
		})) -> ()): () -> ()
			events[6] = callback
			for _, value in event_queue[6] do
				callback(value				)

			end
			event_queue[6] = {}
			return function()
				events[6] = nil
			end
		end,
	},
	obtain_item = {
		set_callback = function(callback: (value: ({
			obtained: (string),
		})) -> ()): () -> ()
			events[7] = callback
			for _, value in event_queue[7] do
				callback(value				)

			end
			event_queue[7] = {}
			return function()
				events[7] = nil
			end
		end,
	},
	trade_rejected = {
		set_callback = function(callback: () -> ()): () -> ()
			events[8] = callback
			for _ = 1, event_queue[8] do
				callback()
			end
			event_queue[8] = 0
			return function()
				events[8] = nil
			end
		end,
	},
	update_inventory = {
		set_callback = function(callback: (value: ({ [(string)]: (number) })) -> ()): () -> ()
			events[9] = callback
			for _, value in event_queue[9] do
				callback(value				)

			end
			event_queue[9] = {}
			return function()
				events[9] = nil
			end
		end,
	},
	set_item_offer = {
		set_callback = function(callback: (value: ({
			item: (string),
			amount: (number),
		})) -> ()): () -> ()
			events[10] = callback
			for _, value in event_queue[10] do
				callback(value				)

			end
			event_queue[10] = {}
			return function()
				events[10] = nil
			end
		end,
	},
}
type Events = typeof(returns)
return returns
